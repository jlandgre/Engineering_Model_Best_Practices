We are developing Python code for a model that will be the class, RollLength. The model is  a technical model for calculating Caliper from roll goods Length, Roll Diameter and Core Diameter. The class will reside in the file, roll_model.py (aka project_file.py below), we will create a single procedure method that calls several, single-action methods. We will also write at least one Pytest test for each class method. These will go in the separate file, test_roll_model.py (aka test_project_file.py below)

* We always use this directory structure, so test file needs to add the libs folder path to sys.path before importing the class.

    project_folder/
    ├── libs/
    │   └── project_file.py
    └── tests/
        └── test_project_file.py

    ```
    # Add the project folder to sys.path and import project class modules
    s = os.path.join(os.path.dirname(__file__), '..', 'libs')
    sys.path.insert(0, os.path.abspath(s))
    ```
* In both the project and test files, you will be instructed where to insert a docstring "fence" to delimit the start of the class and each new multi-function set of methods/tests (reffered to as a "procedure"). These docstring fences look like the example below and should be indented to the level of other methods/tests and the "===" shortened to conform to the 79-character line limit.

    ```
    """
    =========================================================================
    <Procedure name> Procedure
    =========================================================================
    """
    ```
* In my prompts, variable names preceded by "." are class attributes

* Counter to PEP, we use camelCase for method names and snake_case for variable names

* file+path string variables start with "pf" followed by a camel case name. Paths (without file), start with just "p" and file names start with "f". Examples: pfTestData, pTestData, fTestData

* Add a docstring to the methods in the format like this example. The docstring follows the method definition and is indented and enclosed in triple quotes:

    ``` 
    def ImportRawData(self):
        """ 
        Import raw data from a .csv file and create .df_raw DataFrame
        2/18/25
        """
        ...
    ```

* class has an __init__, and its test should be named test_init without double underscore. In general, newly-written methods should not be called from __init__ unless instructed otherwise.
* the __init__ should initialize all newly-created class attributes as either None or an empty list or DataFrame.

* test names should generally match class method names or fixture names

* If we have multiple tests for any class method, they will be test_MethodName1, test_MethodName2 etc.

* To enable easy search in the files, tests should use identical docstrings as the methods they test with the exception of "Test - " at the beginning of the docstring. For example:

    ```
    def test_ImportRawData(self):
        """
        Test - Import raw data from a .csv file and create .df_raw DataFrame
        2/18/25
        """
        ...
    ```

* Convert method and test-writing instructions to shorter comment strings. Do not comment excessively. It's ok to make compound comments. Do not ever include trailing comments in code lines. It's ok to abbreviate common code objects like df and cols for DataFrame and columns. 

    Instead of this:
    ```
    # Check if the DataFrame has two rows
    assert len(rl.df_raw) == 2, "DataFrame does not have two rows"

    # Check the column names
    assert list(rl.df_raw.columns) == ['length', 'diameter'], "Column names do not match"
    ```
    Do this:
    ```
    # Check if the df has two rows and check col names
    assert len(rl.df_raw) == 2
    assert list(rl.df_raw.columns) == ['length', 'diameter']
    ```

* For testing use the following pytest fixtures where the *.csv contains two rows of test data:

    ```
    # Path to mockup data used in the tests
    @pytest.fixture
    def pfTestData():
        return os.path.join(os.path.dirname(__file__), "data_roll_model_tests.csv")


    # Instance of RollLength class with test data from *.csv file
    @pytest.fixture
    def rl(pfTestData):
        return RollLength(file_raw=pfTestData, 
        diam_roll=None, diam_core=None, caliper=None)
    ```

* We put all import statements at file beginning. As we develop methods and tests, repeat the file's complete set of import statements if they change do to new code. Do this in a separate code block in your response if you are also sharing new code.

* When responding to prompts to write code, do not repeat previous code that is unchanged. Just respond with the new code or changes. To make pasting your responses easy, If the import statements change, repeat the complete set of import statements in a separate code block in your response. If the .__init__ method changes, output it in a separate code block too --separate from the import statements and any new method you are writing and outputting in its own code block.